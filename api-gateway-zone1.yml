spring:
  main:
    web-application-type: reactive
  data:
    redis:
      host: redis
      port: 6379
      password: ${redis.password}
      sentinel:
        master: redis-master
        nodes:
          - sentinel-1:26379
          - sentinel-2:26380
          - sentinel-3:26381
      lettuce:
        shutdown-timeout: 200ms
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: http://keycloak:8080/realms/microservice
  cache:
    type: redis
  cloud:
    gateway:
      default-filters:
        - name: RequestRateLimiter
          args:
            # maximum number of requests per period
            redis-rate-limiter.replenishRate: 10
            # maximum number of requests that can be queued before being rejected
            redis-rate-limiter.burstCapacity: 20
            # the key resolver for rate limiting
            key-resolver: "#{@apiKeyResolver}"
      routes:
        - id: event-service
          uri: lb://event-service
          predicates:
            - Path=/event/**
          filters:
            - RewritePath=/event/(?<path>.*), /$\{path}
            - TokenRelay=

apiKeyResolver:
  type: eu.aboutdev.microservice.ratelimiting.ApiKeyResolver

management:
  security:
    enabled: false
  endpoints:
    web:
      exposure:
        include: "*"
  tracing:
    enabled: true
    sampling:
      probability: 1.0
  otlp:
   tracing:
    endpoint: http://jaeger:4318/v1/traces